// --------------------- BASE TSCONFIG -----------------------
{
	"compileOnSave": true,

	"include": [ //File Inclusion
	"./src/**/*",
	"./spec/**/*",
  	],

	"exclude": [
		"./node_modules/**/*",
		"./build/**/*",
		"./dist/**/*",
		"./lib/**/*",
		"./out/**/*",
		"./src/later/**/*",
		"./spec/later/**/*",
		"./types/**/*"
	],

	"references": [
		//		{"path": "../some-ts-repo"} // reference other TS projects to be imported, TSC recompiles changes
			],

	"compilerOptions": {
		"lib": [
			"ESNext",
			// "dom"
		],

		"paths": {
			"src/*": ["./src/*"],
			"dictionaries/*": ["./src/dictionaries/*"],
			"types/*": ["./src/types/*"],
		},

		"outDir": "out", // If specified, .js (as well as .d.ts, .js.map, etc.) files will be emitted into this directory.
		"baseUrl": "./src",

		"composite": true, // enforces certain constraints which make it possible for build tools. Set rootdir to directory containing the tsconfig.json file.
		// "rootDir": ".", // If composite true, rootdir is set to directory containing the tsconfig.json file.

		// "types": ["raw-loader.d.ts", "node"],

		"forceConsistentCasingInFileNames": true,

		"experimentalDecorators": false,

		"noImplicitAny": true,
		"removeComments": false,
		"preserveConstEnums": true,

		"listFiles": false,
		"listEmittedFiles": true,
		"pretty": true, // Stylize errors and messages using color and context, check terminal if not working
		"disableSolutionSearching": false, // not want a project to be included when using features like find all references, improves editor performance
		"assumeChangesOnlyAffectDirectDependencies": false, //avoid rechecking/rebuilding all truly possibly-affected files, and only recheck/rebuild files that have changed

		"inlineSourceMap": true,
		"inlineSources": true,

		// Project options

//		"rootDirs": ["./src", "test"], // If composite true, rootdir is set to directory containing the tsconfig.json file.

		"target": "ESNext", // recommended target based off of the Node version, Node 12 - ES2019
		"module": "ESNext", // Sets the module system for the program

//		"lib": [ // includes a default set of type definitions for built-in JS APIs (like Math), as well as type definitions for things found in browser environments (like document).
//			"es6"
//		],

		// React
		"jsx": "react",

		// emit & types generation
		"declaration": true,
		"declarationMap": false, // Generates a source map for .d.ts files which map back to the original .ts source file
		"declarationDir": "./types", // If specified, .d.ts files will be emitted into this directory.
		// "sourceMap": true, // allow debuggers and other tools to display the original TypeScript source code
		"noEmit": false, // Do not emit compiler output files like JavaScript source code, source-maps or declarations.
		"emitDeclarationOnly": false, // Only output d.ts files and not JavaScript files.

		"isolatedModules": true, // warn if you write certain code that can’t be correctly interpreted by a single-file transpilation process.

		// module resolution
		"allowSyntheticDefaultImports": true, // allows  import React from "react"  When the module does not specify a default export
		"esModuleInterop": false, // emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Also enabled by synthetic imports
		"moduleResolution": "Bundler",
		"resolveJsonModule": false,
		"verbatimModuleSyntax": false,

		"useDefineForClassFields": true, // switches to the upcoming ECMA runtime behavior of class fields
		"allowUnreachableCode": false, // does not allow unreachable code
		"disableSourceOfProjectReferenceRedirect": false, // go back to the pre-3.7 behavior where d.ts files were used

		// strict checks
		"strict": true, // Enable all strict type-checking options.

		// javascript support
		"allowJs": false,

		// completeness
		"skipLibCheck": true, // Skip type checking of default library declaration files. TypeScript will type check only the code you specifically refer to in your app’s source code

		// linter checks
		"noFallthroughCasesInSwitch": true, // Ensures that any non-empty case inside a switch statement includes either break or return.
		"noImplicitOverride": true, // errors if sub-class to get “out of sync” with the functions it overloads when they are renamed in the base class.
		"noImplicitReturns": true, // check all code paths in a function to ensure they return a value.
		"noPropertyAccessFromIndexSignature": true, // ensures consistency between accessing a field via the “dot” (obj.key) syntax, and “indexed” (obj["key"]).
		"noUncheckedIndexedAccess": true, // add undefined to any un-declared field in the type.
		"noUnusedLocals": true, // errors on unused local variables.
		"noUnusedParameters": false, // errors on unused parameters in functions.
	}

}
